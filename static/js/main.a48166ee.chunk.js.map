{"version":3,"sources":["components/Posts.js","components/Pagination.js","App.js","serviceWorker.js","index.js"],"names":["Posts","posts","console","log","class","scope","map","value","key","id","name","attenuation_level","first_brewed","getList","Pagination","props","previousLabel","nextLabel","breakLabel","breakClassName","pageCount","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","subContainerClassName","activeClassName","App","useState","setPosts","postsData","setPostsData","offset","setOffset","perPage","currentPage","setCurrentPage","setPageCount","isReceive","setIsReceive","useEffect","a","axios","get","then","res","data","fetchPosts","receiveData","sliceData","slice","Math","ceil","length","className","e","selectedPage","selected","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wRAmCeA,EAjCD,SAAC,GAAc,IAAZC,EAAW,EAAXA,MACfC,QAAQC,IAAIF,GAeZ,OACA,2BAAOG,MAAM,SACb,+BACE,4BACE,wBAAIC,MAAM,OAAV,MACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,qBACA,wBAAIA,MAAM,OAAV,mBAGF,+BAxBY,WACZ,GAAGJ,EACH,OAAQA,EAAMK,KAAI,SAACC,GACf,OADwBL,QAAQC,IAAII,GAElC,wBAAIC,IAAKD,EAAME,IACb,4BAAKF,EAAME,IACX,4BAAKF,EAAMG,MACX,4BAAKH,EAAMI,mBACX,4BAAKJ,EAAMK,kBAiBlBC,M,iBCNUC,EApBI,SAACC,GAGlB,OACA,kBAAC,IAAD,CACAC,cAAe,OACfC,UAAW,OACXC,WAAY,MACZC,eAAgB,WAChBC,UAAWL,EAAMK,UACjBC,qBAAsB,EACtBC,mBAAoB,GACpBC,aAAcR,EAAMQ,aACpBC,mBAAoB,aACpBC,sBAAuB,mBACvBC,gBAAiB,YC+CJC,G,MA1DH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACT3B,EADS,KACF4B,EADE,OAEkBD,mBAAS,IAF3B,mBAETE,EAFS,KAEEC,EAFF,OAGSH,mBAAS,GAHlB,mBAGVI,EAHU,KAGFC,EAHE,OAIYL,mBAAS,GAJrB,mBAIVM,EAJU,aAKsBN,mBAAS,IAL/B,mBAKTO,EALS,KAKIC,EALJ,OAMkBR,mBAAS,IAN3B,mBAMTR,EANS,KAMEiB,EANF,OAOkBT,oBAAS,GAP3B,mBAOTU,EAPS,KAOEC,EAPF,KASdC,qBAAU,YACQ,uCAAG,sBAAAC,EAAA,sEACXC,IAAMC,IAAN,oCACLC,MAAK,SAACC,GACLhB,EAASgB,EAAIC,MACbP,GAAa,MAJE,2CAAH,qDAOhBQ,KACC,IAEHP,qBAAU,WACRQ,MACA,EAAe,IAAdV,IAEHE,qBAAU,WACRD,GAAa,GACbS,MACA,CAAChB,EAAOG,IAGZ,IAAMa,EAAY,WAChB,IAAIF,EAAM,GAEJG,GADNH,EAAM7C,IACmB6C,EAAKI,MAAMlB,EAAOA,EAASE,GAC9Cd,EAAY+B,KAAKC,KAAKN,GAAQA,EAAKO,OAAOnB,GAChDH,EAAakB,GACbZ,EAAajB,IAUf,OACE,yBAAKkC,UAAU,kBACb,wBAAIA,UAAU,qBAAd,QACA,kBAAC,EAAD,CAAOrD,MAAO6B,IACd,kBAAC,EAAD,CACCV,UAAWA,EACXG,aAbiB,SAACgC,GACrB,IAAMC,EAAcD,EAAEE,SAChBzB,EAAQwB,EAAgBtB,EAC9BE,EAAeoB,GACfvB,EAAUD,SCtCM0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxE,QAAQwE,MAAMA,EAAMC,c","file":"static/js/main.a48166ee.chunk.js","sourcesContent":["import React from 'react';\n\nconst Posts = ({ posts}) => {\n  console.log(posts)\n  const getList=()=>{\n    if(posts){\n    return  posts.map((value)=>{console.log(value)\n        return(\n          <tr key={value.id}>\n            <td>{value.id}</td>\n            <td>{value.name}</td>\n            <td>{value.attenuation_level}</td>\n            <td>{value.first_brewed}</td>\n          </tr>\n        )\n      })\n    }\n  }\n  return (\n  <table class=\"table\">\n  <thead>\n    <tr>\n      <th scope=\"col\">Id</th>\n      <th scope=\"col\">Name</th>\n      <th scope=\"col\">Attenuation level</th>\n      <th scope=\"col\"> First brewed</th>    \n    </tr>\n  </thead>\n    <tbody>\n    {getList()}\n    </tbody>\n  </table>\n  );\n};\n\nexport default Posts;\n","import React from 'react';\nimport ReactPaginate from 'react-paginate';\n\nconst Pagination = (props) => {\n \n\n  return (\n  <ReactPaginate\n  previousLabel={\"prev\"}\n  nextLabel={\"next\"}\n  breakLabel={\"...\"}\n  breakClassName={\"break-me\"}\n  pageCount={props.pageCount}\n  marginPagesDisplayed={2}\n  pageRangeDisplayed={10}\n  onPageChange={props.onPageChange}\n  containerClassName={\"pagination\"}\n  subContainerClassName={\"pages pagination\"}\n  activeClassName={\"active\"}\n  />\n  );\n};\n\nexport default Pagination;\n","import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport axios from 'axios';\nimport Posts from './components/Posts';\nimport Pagination from './components/Pagination';\nimport './App.css';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [postsData, setPostsData] = useState([]);\n  const[offset, setOffset]=useState(0);\n  const[perPage, setPerPage] =useState(5);\n  const [currentPage, setCurrentPage] = useState(0);\n  const [pageCount, setPageCount] = useState('');\n  const [isReceive, setIsReceive] = useState(false);\n\n    useEffect(() => {\n      const fetchPosts = async () => {\n        await axios.get(`https://api.punkapi.com/v2/beers`)\n        .then((res)=>{\n          setPosts(res.data);\n          setIsReceive(true)\n        })\n      };\n      fetchPosts();\n    }, []);\n    \n    useEffect(()=>{\n      receiveData()\n    },[isReceive === true])\n\n    useEffect(()=>{\n      setIsReceive(false);\n      receiveData()\n    },[offset,currentPage])\n     \n\n  const receiveData=()=>{\n    var data =[]\n    data= posts;\n    const sliceData =data && data.slice(offset,offset + perPage)\n    const pageCount = Math.ceil(data && data.length/perPage)\n    setPostsData(sliceData)\n    setPageCount(pageCount)\n  }\n\n  const handlePageClick=(e)=>{\n    const selectedPage= e.selected;\n    const offset= selectedPage *  perPage;\n    setCurrentPage(selectedPage)\n    setOffset(offset)\n  }\n\n  return (\n    <div className=\"container mt-5\">\n      <h1 className=\"text-primary mb-3\">List</h1>\n      <Posts posts={postsData}/>\n      <Pagination\n       pageCount={pageCount}\n       onPageChange={handlePageClick}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}